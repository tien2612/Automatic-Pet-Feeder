/* AUTOMATIC PET FEEDER
*** MENU ***
* 1. All informations (information of all menus)
* 2. Set schedule (up to 3 times)
* 3. Set food is released each time
* 4. Set max food per day
* 5. Reset settings
* 6. Language (VIE, ENG) .. We are working on it ..

* Button0: Press once to access into a menu or display next information when we are inside a menu
* Button1: Press once to display previous information when we are inside a menu.
* Button2: Press once to scroll the menus down.
* Button3: Press once to scroll the menus up.

*/

#include <LiquidCrystal_I2C.h>
#include "Key.h"
#include <Keypad_I2C.h>
#include <Keypad.h>        
#include <Wire.h>
#include <DS1302.h>
#include <HX711.h>
#include <ServoTimer2.h>
#include "myEEPROM.h"
#include <SoftwareSerial.h>
#include <PCM.h>

#define I2CADDR 0x21
#define LCDADDR 0x27

#define IS_PRESSED  HIGH
#define RP_MODE      1                        // State of remaining food in the plate state
#define RC_MODE      2                        // State of remaining food in the container
#define RF_MODE      3                        // State of food released each time
#define MF_MODE      4                        // State of max food per day (user set)

#define T0_MODE      5                        // State of time0 to feed
#define T1_MODE      6                        // State of time1 to feed
#define T2_MODE      7                        // State of time2 to feed

#define INIT_MODE            10
#define SCHEDULE0_MODE       11                       // Set schedule for schedule 0
#define SCHEDULE1_MODE       12                       // Set schedule for schedule 1
#define SCHEDULE2_MODE       13                       // Set schedule for schedule 2
#define SCHEDULE0_ACTIVE     14
#define SCHEDULE1_ACTIVE     15
#define SCHEDULE2_ACTIVE     16

#define TIME_NOTHING_CHANGES    30000           // If nothing changes after 30S, then turn off LCD to save power
#define MAX_FOOD                1600            // Per day food allowance.
#define MIN_FOOD                0
#define MAX_TIMES_FOOD_RELEASED 4
#define MAX_TIMES_SCHEDULE      3

/* Audio decode */

const unsigned char sample[] PROGMEM = {
 109, 104, 100, 114, 118, 126, 125, 125, 115, 87, 77, 41, 8, 0, 0, 0, 0, 13, 52, 96, 151, 199, 251, 255, 255, 255, 255, 255, 248, 216, 180, 144, 124, 95, 91, 91, 93, 110, 116, 132, 127, 128, 111, 94, 65, 28, 0, 0, 0, 0, 0, 0, 23, 108, 160, 214, 255, 255, 255, 255, 255, 255, 255, 232, 170, 142, 114, 76, 94, 74, 94, 108, 111, 138, 124, 120, 105, 65, 40, 0, 0, 0, 0, 0, 0, 6, 76, 123, 215, 255, 255, 255, 255, 255, 255, 255, 247, 192, 161, 115, 99, 88, 74, 105, 99, 121, 142, 128, 142, 112, 89, 53, 0, 0, 0, 0, 0, 0, 0, 42, 112, 191, 244, 255, 255, 255, 255, 255, 255, 228, 205, 153, 111, 113, 88, 83, 116, 109, 133, 153, 143, 146, 122, 101, 54, 7, 0, 0, 0, 0, 0, 0, 31, 134, 175, 253, 255, 255, 255, 255, 255, 255, 247, 190, 145, 123, 91, 90, 98, 98, 126, 133, 147, 151, 130, 129, 85, 53, 8, 0, 0, 0, 0, 0, 0, 50, 128, 180, 255, 255, 255, 255, 255, 255, 255, 229, 198, 136, 115, 102, 85, 97, 102, 120, 126, 144, 138, 128, 107, 75, 40, 0, 0, 0, 0, 0, 0, 0, 99, 135, 216, 255, 255, 255, 255, 255, 255, 255, 230, 161, 139, 117, 81, 106, 94, 114, 129, 146, 145, 144, 138, 95, 67, 34, 0, 0, 0, 0, 0, 0, 4, 85, 173, 206, 255, 255, 255, 255, 255, 255, 255, 226, 160, 163, 125, 106, 120, 112, 117, 137, 141, 127, 140, 99, 75, 46, 0, 0, 0, 0, 0, 0, 0, 36, 143, 163, 251, 255, 255, 255, 255, 255, 255, 240, 212, 173, 135, 120, 113, 97, 110, 123, 120, 131, 135, 108, 109, 60, 34, 0, 0, 0, 0, 0, 0, 0, 90, 147, 206, 255, 255, 255, 255, 255, 255, 255, 250, 183, 162, 132, 110, 109, 97, 105, 117, 115, 120, 121, 88, 81, 36, 0, 0, 0, 0, 0, 0, 0, 89, 128, 195, 255, 255, 255, 255, 255, 255, 255, 241, 196, 168, 126, 96, 90, 72, 71, 94, 93, 111, 124, 116, 125, 79, 61, 20, 0, 12, 0, 13, 21, 30, 123, 123, 191, 255, 254, 255, 255, 255, 255, 249, 214, 182, 136, 107, 85, 72, 60, 75, 82, 94, 109, 114, 114, 86, 71, 23, 8, 23, 0, 23, 31, 28, 125, 114, 185, 241, 236, 255, 255, 255, 255, 244, 239, 197, 151, 136, 97, 79, 72, 65, 73, 78, 81, 93, 76, 65, 54, 4, 27, 19, 0, 54, 37, 66, 141, 124, 203, 237, 239, 255, 255, 255, 255, 250, 236, 191, 170, 129, 110, 89, 69, 81, 65, 68, 80, 64, 61, 54, 21, 14, 36, 4, 30, 64, 41, 115, 127, 145, 219, 211, 254, 255, 255, 255, 249, 248, 217, 181, 174, 124, 118, 98, 72, 86, 65, 61, 76, 49, 45, 44, 6, 38, 35, 18, 80, 60, 89, 149, 124, 194, 215, 208, 255, 248, 251, 255, 229, 218, 195, 168, 145, 128, 103, 89, 85, 66, 68, 64, 50, 52, 42, 21, 42, 47, 31, 81, 76, 84, 149, 126, 173, 215, 191, 247, 242, 233, 255, 219, 214, 203, 168, 157, 141, 111, 105, 96, 72, 78, 65, 54, 55, 42, 36, 31, 51, 45, 56, 93, 75, 120, 141, 133, 195, 189, 204, 237, 217, 233, 226, 206, 205, 186, 163, 153, 138, 114, 117, 100, 85, 92, 71, 69, 65, 53, 51, 49, 59, 57, 75, 87, 91, 120, 125, 146, 168, 174, 193, 199, 204, 206, 200, 195, 184, 174, 158, 149, 136, 126, 121, 109, 107, 101, 95, 94, 84, 79, 74, 71, 70, 74, 78, 84, 98, 103, 119, 133, 141, 160, 165, 175, 184, 183, 184, 180, 176, 166, 161, 150, 139, 139, 125, 124, 123, 113, 115, 110, 104, 101, 98, 90, 87, 90, 82, 91, 94, 91, 108, 108, 117, 133, 130, 145, 152, 151, 163, 161, 161, 168, 159, 161, 159, 148, 152, 145, 140, 143, 129, 130, 126, 113, 120, 109, 103, 108, 96, 98, 100, 93, 103, 101, 101, 112, 108, 116, 121, 119, 130, 130, 134, 143, 141, 149, 152, 151, 157, 155, 156, 156, 151, 150, 147, 141, 137, 133, 127, 121, 119, 114, 109, 110, 106, 107, 109, 107, 111, 112, 112, 115, 116, 118, 122, 122, 125, 130, 131, 135, 138, 138, 142, 142, 143, 144, 141, 142, 138, 135, 135, 128, 127, 126, 120, 122, 121, 118, 120, 120, 120, 122, 122, 121, 124, 123, 124, 127, 126, 127, 129, 127, 130, 130, 130, 133, 131, 133, 134, 133, 134, 132, 131, 131, 128, 128, 127, 126, 126, 125, 126, 126, 126, 126, 126, 127, 126, 127, 126, 126, 127, 125, 126, 126, 124, 125, 125, 125, 127, 127, 128, 129, 130, 130, 131, 131, 130, 131, 129, 129, 129, 128, 128, 127, 128, 127, 127, 126, 125, 126, 124, 125, 124, 122, 125, 123, 123, 125, 122, 125, 126, 125, 129, 129, 130, 132, 131, 133, 133, 132, 133, 132, 131, 130, 129, 129, 128, 127, 127, 127, 126, 126, 125, 125, 125, 125, 125, 125, 125, 126, 126, 126, 128, 128, 128, 129, 129, 130, 130, 130, 130, 130, 129, 128, 128, 127, 126, 126, 126, 125, 125, 125, 125, 125, 126, 125, 126, 127, 126, 128, 128, 128, 129, 129, 130, 130, 130, 131, 130, 130, 130, 130, 130, 129, 128, 128, 127, 126, 126, 125, 124, 124, 124, 124, 124, 124, 124, 125, 125, 126, 126, 127, 128, 128, 129, 129, 130, 130, 130, 130, 130, 130, 129, 129, 129, 128, 128, 127, 127, 126, 126, 126, 125, 125, 125, 125, 125, 125, 126, 126, 126, 126, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 129, 128, 128, 128, 128, 128, 127, 127, 128, 127, 127, 127, 126, 127, 126, 127, 126, 127, 128, 127, 128, 128, 128, 128, 128, 128, 129, 128, 128, 128, 127, 128, 128, 127, 128, 127, 127, 128, 127, 127, 127, 127, 127, 127, 127, 126, 127, 126, 127, 127, 126, 128, 127, 127, 129, 127, 129, 129, 128, 128, 128, 128, 127, 128, 126, 126, 127, 126, 127, 126, 127, 127, 127, 128, 127, 128, 127, 128, 128, 126, 128, 127, 127, 127, 126, 127, 127, 128, 127, 127, 128, 127, 127, 127, 129, 128, 127, 128, 127, 126, 127, 129, 128, 128, 130, 129, 129, 128, 128, 129, 128, 129, 126, 127, 128, 128, 128, 124, 128, 126, 126, 128, 125, 128, 124, 141, 138, 111, 136, 136, 123, 135, 118, 138, 149, 125, 128, 116, 125, 134, 121, 134, 127, 124, 132, 120, 131, 130, 126, 134, 125, 139, 143, 118, 121, 122, 120, 125, 122, 126, 122, 121, 126, 120, 123, 125, 125, 130, 127, 126, 129, 127, 127, 127, 129, 128, 128, 126, 124, 131, 126, 123, 131, 127, 126, 127, 124, 130, 128, 128, 129, 125, 131, 131, 129, 129, 125, 130, 130, 128, 131, 125, 128, 126, 121, 133, 129, 131, 139, 128, 128, 133, 128, 132, 133, 132, 130, 126, 127, 129, 128, 130, 131, 128, 126, 128, 129, 128, 126, 129, 135, 133, 130, 134, 138, 137, 129, 124, 134, 135, 118, 120, 143, 142, 109, 99, 121, 135, 124, 118, 128, 132, 129, 122, 127, 151, 157, 159, 166, 147, 123, 121, 127, 107, 92, 113, 119, 101, 96, 111, 118, 104, 112, 142, 152, 145, 136, 124, 111, 98, 87, 89, 98, 98, 91, 100, 130, 136, 122, 127, 140, 146, 135, 126, 127, 119, 117, 120, 131, 142, 127, 123, 143, 157, 143, 127, 144, 147, 137, 132, 125, 143, 145, 124, 128, 147, 151, 131, 126, 142, 143, 128, 117, 129, 130, 120, 132, 144, 148, 138, 125, 135, 142, 137, 133, 123, 113, 119, 123, 117, 118, 110, 121, 154, 141, 116, 133, 155, 135, 103, 114, 139, 133, 110, 107, 125, 135, 132, 116, 116, 142, 141, 124, 127, 123, 111, 121, 131, 121, 118, 122, 128, 137, 135, 128, 122, 129, 138, 128, 122, 123, 119, 128, 127, 106, 117, 148, 141, 122, 122, 138, 147, 112, 104, 144, 143, 107, 97, 131, 150, 118, 106, 124, 137, 136, 121, 127, 132, 116, 123, 142, 137, 113, 106, 131, 137, 121, 119, 127, 134, 130, 127, 127, 121, 128, 126, 125, 129, 115, 124, 136, 129, 131, 130, 139, 146, 136, 132, 124, 123, 121, 111, 118, 124, 122, 123, 120, 114, 120, 134, 138, 146, 151, 141, 134, 130, 117, 113, 117, 121, 137, 143, 135, 137, 138, 135, 131, 126, 131, 137, 131, 119, 116, 125, 125, 117, 111, 126, 146, 133, 124, 125, 129, 144, 124, 114, 125, 119, 138, 136, 135, 141, 114, 126, 131, 118, 131, 126, 137, 155, 149, 140, 117, 119, 128, 120, 121, 114, 129, 149, 124, 119, 113, 116, 139, 123, 132, 138, 138, 138, 112, 112, 123, 123, 137, 131, 129, 128, 135, 140, 116, 115, 111, 123, 142, 122, 107, 90, 89, 121, 107, 104, 126, 134, 137, 113, 87, 108, 150, 153, 133, 133, 153, 160, 149, 133, 118, 138, 148, 151, 166, 158, 165, 137, 129, 147, 138, 143, 133, 122, 120, 114, 131, 125, 125, 104, 68, 71, 54, 65, 101, 103, 115, 136, 115, 115, 103, 86, 141, 178, 164, 140, 122, 132, 174, 193, 155, 151, 166, 179, 168, 122, 141, 174, 180, 177, 134, 121, 120, 84, 98, 129, 126, 96, 76, 82, 109, 100, 59, 40, 75, 124, 140, 101, 61, 84, 115, 158, 138, 107, 115, 140, 179, 185, 165, 150, 173, 192, 168, 131, 117, 147, 187, 188, 163, 142, 130, 130, 136, 124, 124, 113, 113, 123, 94, 89, 87, 82, 86, 97, 114, 97, 93, 70, 63, 112, 141, 146, 116, 95, 124, 164, 178, 151, 145, 180, 190, 156, 135, 143, 175, 203, 171, 154, 139, 150, 148, 135, 133, 136, 146, 119, 110, 92, 100, 93, 74, 87, 110, 118, 94, 40, 15, 62, 105, 132, 123, 82, 101, 119, 116, 131, 161, 195, 212, 185, 124, 153, 169, 170, 180, 149, 172, 188, 164, 147, 148, 164, 163, 137, 102, 110, 132, 118, 86, 57, 58, 98, 110, 88, 60, 44, 70, 64, 71, 75, 80, 111, 114, 109, 165, 162, 169, 182, 191, 240, 189, 171, 152, 198, 223, 176, 161, 154, 189, 186, 118, 95, 96, 121, 132, 97, 73, 71, 70, 73, 93, 80, 84, 35, 10, 17, 67, 91, 109, 101, 86, 165, 166, 188, 154, 150, 203, 243, 249, 194, 186, 196, 208, 217, 169, 162, 162, 146, 152, 112, 106, 101, 108, 109, 78, 64, 52, 60, 71, 52, 71, 73, 65, 41, 10, 52, 63, 117, 122, 125, 172, 161, 190, 182, 184, 210, 240, 255, 221, 181, 162, 196, 225, 206, 162, 133, 124, 133, 119, 93, 73, 95, 127, 120, 80, 19, 14, 51, 65, 44, 6, 9, 58, 69, 106, 79, 100, 165, 183, 200, 156, 128, 169, 234, 255, 249, 197, 198, 213, 232, 199, 170, 146, 145, 144, 125, 111, 91, 97, 91, 114, 122, 102, 64, 36, 43, 57, 52, 11, 0, 0, 9, 67, 115, 153, 179, 163, 177, 167, 189, 205, 213, 230, 224, 219, 206, 207, 218, 216, 199, 169, 130, 106, 93, 101, 126, 142, 140, 96, 83, 89, 100, 94, 51, 18, 10, 4, 0, 0, 0, 51, 112, 171, 148, 131, 119, 173, 222, 248, 241, 190, 195, 212, 233, 231, 203, 189, 184, 173, 144, 93, 106, 131, 169, 152, 116, 97, 110, 117, 106, 104, 91, 97, 67, 19, 0, 0, 0, 15, 65, 78, 80, 100, 164, 200, 225, 205, 189, 210, 212, 218, 201, 221, 229, 225, 202, 142, 125, 123, 150, 142, 113, 107, 126, 161, 176, 154, 131, 104, 97, 76, 67, 56, 39, 7, 0, 0, 0, 29, 87, 117, 124, 149, 192, 207, 211, 207, 204, 221, 242, 227, 195, 185, 189, 200, 187, 148, 111, 99, 97, 103, 128, 146, 169, 168, 169, 151, 135, 135, 107, 86, 44, 34, 18, 0, 0, 0, 0, 63, 132, 129, 134, 151, 181, 225, 237, 245, 215, 210, 202, 214, 207, 203, 180, 154, 139, 115, 94, 87, 93, 140, 176, 179, 173, 158, 163, 165, 161, 141, 117, 68, 25, 0, 0, 0, 0, 0, 3, 92, 137, 143, 127, 172, 213, 253, 255, 225, 206, 195, 214, 220, 220, 195, 162, 140, 117, 108, 91, 101, 108, 150, 163, 173, 171, 164, 168, 163, 169, 146, 116, 61, 14, 0, 0, 0, 0, 0, 11, 83, 155, 169, 154, 171, 189, 248, 250, 245, 194, 185, 200, 211, 216, 181, 155, 121, 116, 95, 86, 96, 121, 172, 194, 196, 166, 163, 158, 169, 167, 137, 104, 53, 6, 0, 0, 0, 0, 0, 33, 91, 132, 153, 169, 196, 225, 251, 250, 231, 208, 191, 192, 194, 203, 189, 156, 116, 77, 76, 89, 124, 141, 164, 172, 180, 186, 185, 177, 163, 157, 142, 115, 56, 1, 0, 0, 0, 0, 0, 7, 86, 137, 180, 185, 205, 213, 246, 255, 247, 223, 186, 181, 180, 201, 184, 152, 111, 79, 76, 86, 104, 122, 163, 181, 192, 190, 184, 190, 187, 177, 152, 124, 82, 36, 0, 0, 0, 0, 0, 0, 57, 106, 152, 176, 199, 212, 232, 247, 241, 222, 194, 189, 191, 196, 196, 165, 134, 100, 77, 86, 101, 130, 147, 171, 186, 202, 203, 194, 188, 175, 166, 135, 99, 45, 0, 0, 0, 0, 0, 0, 18, 95, 153, 178, 185, 198, 221, 244, 246, 226, 207, 199, 199, 199, 191, 173, 145, 116, 96, 90, 100, 119, 140, 154, 179, 192, 199, 197, 188, 172, 157, 146, 124, 88, 10, 0, 0, 0, 0, 0, 0, 45, 124, 177, 203, 208, 216, 245, 255, 255, 223, 201, 187, 194, 197, 179, 158, 118, 93, 75, 81, 103, 135, 161, 171, 189, 197, 202, 193, 178, 169, 159, 151, 111, 62, 0, 0, 0, 0, 0, 0, 30, 89, 139, 165, 194, 225, 252, 255, 255, 234, 219, 202, 194, 187, 181, 169, 144, 115, 82, 67, 64, 91, 127, 166, 191, 202, 196, 187, 179, 178, 175, 162, 141, 98, 40, 0, 0, 0, 0, 0, 0, 36, 93, 141, 180, 211, 235, 245, 255, 252, 243, 223, 203, 184, 178, 179, 169, 146, 109, 77, 66, 81, 105, 135, 157, 179, 202, 205, 197, 179, 172, 166, 158, 132, 87, 32, 0, 0, 0, 0, 0, 0, 42, 93, 138, 180, 215, 240, 255, 255, 252, 237, 221, 206, 188, 179, 171, 156, 141, 115, 93, 80, 88, 104, 127, 152, 176, 192, 193, 191, 187, 181, 169, 152, 120, 80, 28, 0, 0, 0, 0, 0, 0, 20, 83, 135, 180, 210, 233, 253, 255, 255, 255, 246, 226, 206, 186, 166, 149, 130, 111, 92, 83, 83, 90, 108, 126, 148, 168, 187, 196, 199, 186, 171, 153, 129, 103, 61, 17, 0, 0, 0, 0, 0, 0, 50, 96, 139, 175, 206, 236, 255, 255, 255, 255, 246, 234, 214, 189, 168, 142, 122, 102, 90, 84, 84, 97, 107, 125, 144, 160, 173, 176, 175, 164, 156, 137, 116, 79, 41, 2, 0, 0, 0, 0, 0, 18, 52, 93, 132, 170, 206, 236, 252, 255, 255, 255, 255, 248, 228, 212, 183, 153, 128, 107, 100, 95, 97, 97, 105, 110, 121, 130, 145, 156, 159, 154, 137, 117, 88, 61, 33, 8, 0, 0, 0, 0, 9, 37, 65, 98, 137, 173, 204, 222, 244, 255, 255, 255, 255, 247, 227, 204, 186, 170, 153, 136, 125, 118, 112, 106, 102, 102, 104, 111, 110, 111, 109, 100, 85, 68, 46, 24, 11, 4, 1, 10, 14, 33, 55, 87, 123, 155, 184, 208, 235, 255, 255, 255, 255, 255, 255, 234, 209, 182, 159, 141, 124, 113, 102, 94, 89, 88, 86, 89, 91, 98, 104, 102, 93, 77, 61, 47, 32, 23, 11, 6, 10, 21, 41, 69, 97, 133, 168, 196, 225, 251, 255, 255, 255, 255, 255, 240, 219, 196, 173, 150, 131, 115, 105, 97, 96, 97, 101, 104, 109, 113, 113, 108, 94, 77, 57, 33, 13, 0, 0, 0, 2, 23, 52, 88, 121, 154, 181, 209, 236, 253, 255, 255, 255, 255, 242, 224, 200, 180, 159, 141, 125, 108, 97, 90, 87, 91, 92, 98, 105, 109, 110, 101, 90, 74, 58, 36, 17, 7, 1, 8, 18, 41, 72, 104, 136, 167, 195, 219, 241, 255, 255, 255, 255, 255, 242, 223, 205, 183, 159, 139, 124, 112, 102, 94, 90, 90, 92, 97, 102, 105, 102, 95, 83, 69, 50, 31, 15, 5, 3, 11, 24, 45, 73, 103, 135, 166, 194, 221, 243, 255, 255, 255, 255, 253, 234, 213, 191, 167, 145, 128, 114, 105, 97, 90, 87, 87, 92, 95, 93, 91, 86, 79, 68, 57, 37, 24, 16, 12, 19, 30, 49, 73, 103, 132, 161, 187, 212, 233, 250, 255, 255, 255, 254, 238, 218, 197, 173, 152, 134, 120, 108, 99, 93, 91, 90, 92, 93, 92, 90, 87, 81, 70, 59, 43, 27, 18, 14, 16, 26, 44, 69, 96, 128, 155, 182, 207, 225, 243, 255, 255, 255, 255, 245, 229, 208, 186, 163, 145, 127, 114, 102, 94, 91, 89, 88, 87, 88, 87, 86, 80, 72, 64, 52, 41, 32, 25, 27, 33, 46, 63, 88, 115, 137, 163, 185, 206, 225, 238, 248, 254, 250, 241, 226, 208, 188, 166, 150, 133, 121, 108, 100, 95, 90, 91, 91, 90, 89, 90, 90, 87, 83, 75, 65, 57, 50, 46, 47, 57, 69, 88, 110, 129, 149, 169, 187, 203, 217, 229, 235, 236, 235, 222, 212, 194, 175, 158, 141, 127, 113, 105, 97, 91, 88, 86, 85, 85, 86, 88, 86, 87, 84, 76, 72, 65, 62, 61, 61, 73, 80, 97, 119, 133, 149, 165, 180, 191, 202, 210, 217, 219, 215, 208, 201, 181, 172, 162, 146, 134, 120, 112, 100, 96, 91, 89, 83, 84, 86, 87, 85, 88, 88, 84, 83, 82, 81, 81, 85, 93, 107, 112, 128, 138, 150, 157, 166, 175, 177, 182, 185, 185, 184, 177, 172, 165, 152, 147, 134, 131, 123, 117, 117, 112, 112, 102, 104, 102, 97, 105, 104, 106, 102, 101, 101, 101, 99, 99, 102, 101, 110, 115, 124, 129, 135, 141, 151, 154, 157, 162, 163, 165, 163, 162, 156, 152, 146, 143, 137, 133, 126, 123, 121, 119, 116, 117, 119, 115, 115, 117, 118, 117, 116, 115, 115, 112, 113, 117, 119, 116, 119, 120, 121, 123, 123, 125, 127, 125, 126, 133, 129, 132, 136, 136, 138, 139, 141, 145, 143, 141, 143, 143, 144, 146, 146, 145, 138, 134, 130, 128, 127, 123, 126, 121, 119, 117, 118, 114, 109, 111, 107, 108, 105, 103, 106, 105, 107, 108, 112, 115, 119, 126, 131, 135, 139, 142, 149, 156, 151, 155, 153, 155, 149, 147, 151, 139, 139, 132, 133, 120, 119, 113, 105, 106, 103, 106, 107, 111, 114, 115, 116, 123, 126, 130, 133, 136, 136, 143, 138, 140, 138, 133, 137, 131, 127, 125, 123, 121, 124, 120, 121, 118, 125, 125, 135, 133, 133, 141, 133, 135, 133, 132, 131, 127, 127, 127, 122, 124, 116, 119, 116, 113, 122, 117, 126, 125, 126, 133, 132, 137, 137, 137, 139, 135, 133, 140, 138, 139, 141, 134, 130, 124, 124, 122, 121, 117, 120, 122, 120, 122, 121, 121, 123, 132, 128, 127, 125, 126, 130, 123, 131, 132, 133, 131, 129, 137, 131, 133, 136, 133, 129, 130, 135, 128, 129, 130, 125, 126, 122, 120, 130, 128, 127, 127, 125, 126, 120, 121, 122, 130, 125, 118, 127, 122, 122, 121, 122, 128, 128, 129, 133, 134, 132, 133, 134, 134, 137, 137, 129, 132, 132, 130, 131, 131, 129, 128, 130, 127, 128, 128, 124, 126, 125, 124, 124, 124, 128, 123, 124, 127, 125, 126, 127, 124, 122, 122, 126, 132, 132, 127, 131, 134, 127, 128, 131, 133, 135, 126, 127, 136, 128, 129, 131, 121, 130, 131, 123, 130, 129, 131, 132, 126, 122, 121, 132, 128, 123, 130, 122, 123, 128, 123, 125, 125, 124, 125, 127, 126, 127, 130, 128, 130, 128, 130, 132, 126, 131, 130, 127, 133, 127, 126, 130, 129, 132, 129, 129, 127, 128, 129, 127, 130, 125, 123, 128, 122, 127, 129, 125, 130, 126, 127, 126, 123, 132, 126, 125, 132, 126, 128, 126, 126, 132, 128, 129, 130, 130, 129, 125, 130, 128, 129, 130, 123, 129, 128, 122, 125, 128, 132, 127, 130, 128, 119, 133, 128, 123, 130, 121, 130, 130, 120, 127, 125, 126, 131, 125, 128, 129, 128, 129, 126, 129, 132, 126, 126, 131, 131, 127, 126, 128, 127, 125, 127, 129, 129, 128, 125, 128, 130, 126, 125, 126, 126, 126, 127, 125, 124, 128, 129, 126, 127, 126, 126, 129, 127, 126, 127, 128, 127, 125, 127, 130, 129, 127, 130, 130, 127, 130, 128, 126, 129, 129, 131, 126, 124, 129, 124, 127, 128, 124, 128, 126, 126, 128, 124, 127, 126, 125, 129, 124, 126, 129, 125, 124, 127, 128, 128, 127, 125, 128, 129, 126, 129, 128, 129, 131, 126, 130, 127, 125, 133, 127, 127, 131, 126, 128, 127, 125, 130, 129, 126, 126, 126, 125, 127, 128, 126, 127, 127, 127, 125, 126, 127, 126, 128, 126, 128, 128, 124, 129, 127, 128, 130, 125, 128, 127, 129, 129, 125, 131, 128, 126, 129, 127, 129, 129, 126, 129, 127, 125, 128, 128, 127, 128, 125, 127, 129, 126, 128, 127, 126, 128, 126, 128, 127, 126, 128, 128, 129, 127, 125, 129, 126, 126, 130, 127, 127, 129, 127, 128, 130, 127, 129, 128, 126, 129, 127, 127, 128, 128, 129, 128, 128, 127, 128, 128, 127, 128, 127, 128, 127, 127, 128, 127, 128, 128, 126, 128, 127, 127, 127, 127, 128, 128, 127, 127, 128, 128, 127, 129, 127, 127, 129, 128, 128, 129, 128, 128, 129, 128, 128, 128, 128, 128, 128, 127, 129, 128, 127, 128, 128, 128, 129, 128, 127, 128, 127, 128, 127, 127, 127, 127, 129, 128, 127, 128, 127, 128, 128, 127, 128, 128, 128, 128, 128, 128, 128, 128, 127, 128, 128, 128, 128, 127, 128, 128, 128, 128, 127, 128, 128, 128, 128, 127, 128, 128, 127, 128, 127, 128, 128, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 129, 128, 128, 128, 128, 129, 128, 128, 128, 128, 128, 128, 128, 128, 128, 129, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 129, 128, 128, 129, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 128, 128, 128, 128, 127, 128, 127, 128, 128, 128, 128, 127, 128, 127, 127, 128, 127, 128, 127, 127, 128, 127, 127, 128, 127, 128, 127, 127, 128, 127, 128, 127, 128, 128, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 127, 128, 128, 128, 129, 127, 127, 129, 127, 128, 128, 127, 128, 128, 128, 128, 128, 128, 128, 127, 128, 128, 127, 128, 128, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 126, 127, 128, 127, 128, 127, 126, 127, 126, 127, 127, 126, 127, 126, 127, 129, 125, 128, 127, 125, 129, 125, 127, 128, 125, 129, 127, 127, 128, 126, 127, 126, 128, 127, 126, 129, 127, 127, 127, 126, 128, 127, 128, 127, 128, 127, 127, 129, 127, 127, 127, 127, 128, 127, 128, 127, 129, 128, 127, 129, 126, 129, 127, 128, 131, 126, 141, 138, 124, 130, 124, 130, 130, 123, 131, 129, 135, 131, 118, 124, 122, 121, 125, 120, 122, 124, 125, 126, 127, 129, 130, 129, 128, 128, 127, 127, 125, 126, 127, 126, 125, 120, 122, 128, 122, 123, 123, 124, 126, 120, 125, 127, 125, 131, 132, 130, 130, 132, 130, 127, 130, 125, 127, 131, 123, 124, 129, 122, 121, 129, 130, 127, 127, 127, 125, 125, 133, 130, 124, 129, 125, 127, 131, 125, 133, 128, 128, 136, 123, 127, 127, 122, 131, 126, 129, 129, 121, 125, 124, 129, 127, 127, 134, 125, 133, 135, 127, 134, 130, 130, 129, 122, 129, 122, 122, 129, 126, 129, 130, 128, 127, 122, 128, 130, 123, 128, 130, 122, 127, 126, 125, 133, 127, 134, 134, 125, 139, 128, 123, 127, 122, 137, 125, 127, 135, 121, 138, 123, 126, 136, 120, 146, 121, 121, 145, 111, 130, 124, 127, 138, 110, 148, 117, 116, 149, 97, 141, 129, 111, 150, 100, 138, 135, 108, 150, 109, 139, 129, 107, 160, 109, 129, 139, 110, 143, 110, 134, 135, 107, 148, 115, 129, 140, 122, 151, 114, 139, 143, 105, 154, 118, 114, 152, 110, 129, 128, 117, 137, 111, 135, 127, 108, 146, 117, 125, 141, 115, 136, 116, 124, 144, 112, 137, 132, 123, 137, 119, 134, 121, 125, 135, 105, 139, 127, 117, 152, 117, 129, 146, 124, 129, 126, 132, 118, 119, 138, 115, 126, 134, 118, 129, 133, 125, 124, 136, 125, 116, 141, 128, 114, 136, 134, 119, 134, 139, 121, 129, 138, 126, 125, 130, 131, 115, 130, 141, 108, 131, 136, 107, 136, 130, 114, 131, 126, 125, 123, 129, 133, 114, 132, 141, 113, 133, 143, 116, 133, 136, 119, 134, 132, 129, 127, 122, 132, 117, 119, 127, 116, 123, 126, 124, 117, 129, 135, 112, 137, 137, 114, 137, 128, 123, 127, 127, 134, 120, 143, 139, 121, 155, 140, 129, 149, 142, 144, 137, 141, 143, 134, 141, 128, 127, 125, 106, 116, 105, 91, 95, 80, 86, 81, 77, 100, 85, 105, 133, 116, 147, 153, 148, 176, 158, 174, 182, 160, 184, 165, 158, 172, 147, 152, 149, 146, 146, 127, 140, 120, 106, 117, 80, 77, 83, 44, 41, 49, 40, 42, 66, 91, 92, 124, 168, 159, 181, 213, 201, 207, 203, 198, 184, 160, 169, 141, 125, 145, 122, 122, 139, 136, 135, 140, 148, 128, 120, 120, 85, 75, 63, 39, 38, 21, 29, 47, 54, 81, 117, 145, 165, 203, 216, 214, 235, 221, 200, 196, 172, 153, 136, 123, 117, 111, 114, 125, 123, 138, 147, 139, 148, 137, 121, 110, 89, 72, 42, 27, 31, 8, 29, 61, 67, 108, 150, 172, 203, 222, 237, 241, 220, 220, 200, 162, 162, 136, 107, 124, 108, 101, 119, 125, 129, 137, 142, 139, 130, 118, 109, 81, 61, 41, 13, 20, 14, 18, 66, 71, 110, 163, 172, 213, 242, 237, 249, 240, 229, 206, 170, 172, 132, 108, 123, 99, 89, 112, 113, 116, 135, 139, 133, 137, 120, 109, 86, 59, 34, 14, 30, 14, 27, 73, 83, 120, 174, 184, 214, 243, 237, 239, 233, 210, 197, 163, 148, 134, 97, 103, 103, 91, 105, 118, 117, 132, 134, 132, 127, 110, 97, 77, 45, 29, 35, 32, 31, 65, 92, 111, 157, 187, 205, 230, 236, 237, 240, 213, 199, 176, 149, 130, 110, 103, 87, 90, 100, 99, 113, 124, 137, 140, 130, 130, 111, 93, 75, 52, 39, 45, 46, 49, 75, 101, 123, 158, 187, 202, 217, 225, 229, 214, 200, 191, 168, 146, 128, 115, 107, 91, 95, 105, 110, 114, 119, 126, 124, 113, 98, 80, 53, 50, 51, 34, 49, 75, 86, 120, 147, 174, 208, 217, 225, 239, 223, 208, 201, 176, 152, 132, 116, 98, 85, 85, 88, 90, 101, 110, 121, 127, 134, 139, 131, 127, 122, 103, 92, 83, 72, 76, 81, 80, 95, 112, 123, 142, 157, 176, 188, 184, 192, 195, 184, 174, 166, 157, 140, 129, 126, 114, 110, 112, 108, 99, 94, 90, 81, 62, 51, 64, 65, 57, 78, 95, 109, 135, 148, 179, 203, 197, 215, 223, 201, 197, 185, 160, 144, 120, 103, 100, 86, 78, 80, 85, 94, 100, 110, 125, 134, 144, 153, 158, 163, 162, 162, 160, 151, 139, 131, 122, 107, 97, 90, 81, 73, 67, 69, 77, 84, 91, 104, 125, 137, 147, 161, 178, 182, 180, 185, 181, 171, 168, 156, 150, 148, 137, 131, 129, 126, 121, 109, 99, 83, 53, 57, 66, 46, 47, 66, 76, 103, 121, 140, 178, 194, 203, 218, 222, 221, 207, 190, 181, 149, 127, 111, 88, 78, 68, 59, 70, 74, 82, 100, 111, 128, 141, 150, 162, 169, 166, 169, 170, 163, 154, 150, 140, 131, 122, 116, 112, 108, 104, 106, 105, 106, 113, 117, 120, 121, 125, 132, 138, 136, 137, 136, 133, 128, 119, 105, 96, 82, 77, 77, 74, 75, 81, 90, 106, 120, 132, 155, 168, 178, 188, 190, 193, 187, 174, 170, 149, 136, 125, 108, 105, 98, 91, 100, 104, 110, 124, 135, 150, 155, 158, 165, 163, 161, 154, 145, 141, 119, 102, 93, 75, 71, 70, 59, 66, 80, 86, 102, 120, 133, 150, 168, 176, 184, 190, 190, 187, 181, 172, 159, 150, 138, 122, 115, 103, 93, 95, 86, 83, 96, 99, 104, 120, 128, 140, 152, 165, 175, 171, 174, 173, 160, 149, 132, 118, 102, 76, 57, 47, 42, 39, 38, 49, 68, 83, 101, 123, 149, 171, 184, 197, 205, 209, 205, 196, 192, 177, 157, 145, 128, 110, 103, 91, 80, 83, 81, 81, 93, 99, 108, 121, 132, 141, 151, 157, 165, 166, 164, 167, 158, 153, 146, 131, 123, 117, 108, 97, 98, 97, 90, 99, 103, 105, 114, 119, 124, 135, 139, 143, 149, 152, 153, 151, 152, 149, 144, 138, 131, 123, 108, 98, 92, 80, 73, 75, 74, 77, 89, 99, 116, 129, 146, 166, 172, 182, 191, 191, 186, 181, 172, 158, 143, 127, 116, 104, 91, 86, 82, 83, 84, 90, 102, 109, 120, 134, 144, 153, 161, 165, 167, 165, 164, 157, 151, 148, 136, 129, 127, 117, 115, 117, 110, 110, 117, 115, 120, 133, 132, 138, 150, 145, 143, 144, 128, 121, 102, 79, 86, 67, 48, 66, 62, 69, 94, 102, 130, 155, 167, 191, 198, 202, 214, 198, 192, 187, 158, 147, 136, 111, 102, 92, 82, 78, 74, 83, 89, 87, 106, 115, 119, 137, 144, 148, 156, 162, 158, 158, 154, 148, 140, 134, 128, 116, 114, 108, 101, 102, 98, 100, 102, 104, 111, 117, 124, 130, 137, 144, 149, 153, 155, 156, 155, 152, 149, 144, 139, 135, 128, 125, 123, 122, 118, 129, 138, 128, 141, 149, 137, 150, 145, 131, 135, 118, 102, 88, 72, 73, 55, 52, 69, 57, 77, 100, 102, 136, 154, 161, 191, 195, 199, 206, 196, 193, 180, 161, 151, 128, 113, 106, 88, 87, 86, 80, 90, 94, 99, 116, 122, 132, 144, 149, 158, 159, 167, 165, 159, 170, 157, 149, 163, 142, 139, 149, 126, 127, 134, 109, 117, 110, 87, 97, 78, 62, 59, 44, 55, 41, 49, 77, 58, 104, 125, 111, 178, 183, 180, 230, 210, 215, 232, 204, 199, 186, 164, 146, 126, 112, 93, 83, 79, 68, 76, 77, 81, 100, 103, 119, 139, 138, 156, 167, 164, 175, 172, 172, 171, 164, 164, 150, 147, 139, 127, 131, 110, 114, 113, 89, 106, 92, 80, 93, 67, 67, 73, 56, 65, 71, 75, 88, 107, 120, 134, 166, 171, 186, 208, 197, 208, 206, 187, 184, 165, 149, 131, 115, 103, 90, 84, 77, 86, 89, 96, 120, 127, 147, 170, 171, 188, 194, 181, 181, 165, 137, 120, 77, 61, 49, 5, 21, 9, 0, 52, 46, 75, 136, 132, 183, 219, 208, 249, 248, 231, 249, 213, 196, 186, 145, 136, 107, 87, 82, 60, 71, 66, 69, 99, 89, 123, 141, 136, 175, 166, 167, 180, 150, 150, 131, 105, 89, 66, 59, 37, 43, 43, 44, 69, 78, 104, 129, 141, 173, 179, 197, 209, 204, 212, 197, 196, 190, 166, 172, 154, 140, 151, 124, 132, 132, 110, 123, 104, 86, 82, 41, 56, 39, 15, 50, 21, 49, 86, 70, 139, 156, 163, 232, 209, 234, 255, 220, 238, 224, 179, 184, 145, 110, 114, 75, 66, 71, 51, 66, 79, 87, 114, 127, 157, 168, 191, 203, 196, 209, 188, 173, 155, 112, 97, 54, 32, 22, 0, 8, 0, 14, 50, 57, 104, 133, 152, 201, 204, 223, 243, 230, 239, 226, 206, 197, 172, 153, 137, 119, 107, 96, 96, 90, 96, 100, 96, 106, 100, 86, 85, 62, 63, 58, 39, 60, 47, 69, 96, 91, 148, 160, 179, 223, 212, 237, 242, 224, 231, 208, 185, 172, 142, 121, 109, 89, 79, 77, 74, 80, 94, 101, 121, 138, 143, 165, 167, 164, 167, 153, 132, 117, 86, 60, 58, 24, 25, 30, 16, 60, 59, 89, 136, 136, 191, 201, 211, 245, 227, 236, 234, 203, 206, 181, 157, 153, 125, 117, 111, 94, 103, 100, 100, 116, 112, 126, 129, 121, 129, 107, 100, 80, 55, 55, 27, 30, 29, 25, 52, 64, 89, 124, 150, 177, 208, 221, 237, 245, 239, 238, 217, 203, 179, 155, 143, 116, 108, 95, 87, 88, 91, 97, 108, 122, 126, 144, 147, 149, 149, 140, 124, 105, 89, 55, 52, 34, 21, 37, 27, 57, 75, 95, 136, 151, 188, 208, 219, 238, 233, 232, 228, 208, 196, 177, 152, 141, 123, 107, 105, 94, 92, 100, 98, 111, 122, 125, 144, 144, 145, 146, 130, 119, 97, 72, 56, 35, 19, 24, 12, 26, 53, 56, 105, 127, 153, 202, 205, 235, 247, 241, 248, 235, 217, 204, 183, 156, 145, 123, 109, 104, 92, 94, 94, 99, 107, 118, 127, 135, 143, 141, 142, 130, 117, 102, 77, 58, 42, 24, 17, 18, 16, 35, 53, 76, 110, 138, 173, 199, 226, 238, 248, 254, 242, 239, 217, 198, 180, 152, 138, 119, 105, 97, 91, 92, 97, 109, 113, 132, 140, 145, 159, 149, 147, 138, 114, 102, 72, 49, 31, 7, 8, 0, 4, 27, 37, 72, 110, 128, 182, 201, 224, 255, 246, 255, 255, 235, 234, 200, 181, 164, 134, 123, 109, 96, 96, 98, 97, 115, 118, 131, 142, 144, 152, 144, 143, 127, 113, 94, 73, 48, 31, 13, 2, 8, 3, 21, 46, 58, 104, 127, 159, 200, 210, 245, 249, 253, 255, 237, 234, 213, 181, 176, 137, 126, 112, 93, 96, 88, 99, 102, 117, 130, 138, 154, 154, 161, 157, 146, 139, 111, 97, 70, 46, 29, 11, 0, 3, 5, 13, 47, 57, 100, 133, 152, 202, 211, 235, 255, 241, 255, 239, 220, 213, 181, 163, 149, 123, 114, 109, 95, 106, 106, 110, 129, 126, 145, 150, 148, 160, 144, 145, 130, 106, 98, 65, 48, 35, 9, 10, 1, 7, 22, 35, 67, 91, 124, 159, 180, 216, 229, 244, 254, 244, 243, 225, 208, 188, 167, 144, 130, 112, 106, 100, 99, 108, 113, 124, 135, 143, 152, 158, 156, 156, 146, 132, 114, 95, 69, 56, 27, 21, 4, 3, 11, 16, 42, 61, 90, 122, 151, 179, 207, 224, 240, 242, 245, 231, 225, 205, 185, 167, 146, 127, 118, 103, 102, 103, 103, 117, 120, 138, 143, 154, 161, 161, 157, 156, 134, 124, 101, 79, 61, 36, 22, 8, 8, 9, 16, 35, 59, 81, 119, 146, 171, 206, 222, 229, 252, 235, 234, 227, 197, 189, 165, 142, 131, 112, 103, 106, 92, 110, 111, 118, 143, 138, 158, 162, 157, 166, 146, 143, 121, 98, 86, 55, 39, 27, 12, 10, 22, 17, 44, 72, 78, 132, 146, 170, 216, 210, 240, 245, 227, 239, 207, 192, 181, 143, 135, 116, 97, 99, 94, 92, 111, 114, 129, 146, 154, 167, 172, 177, 170, 165, 149, 130, 108, 84, 63, 30, 25, 3, 0, 21, 0, 41, 62, 69, 135, 141, 178, 217, 218, 244, 248, 235, 237, 212, 192, 173, 142, 124, 108, 89, 90, 83, 93, 99, 116, 130, 143, 165, 166, 186, 178, 178, 178, 147, 143, 113, 77, 74, 18, 17, 5, 0, 11, 5, 34, 66, 90, 139, 160, 204, 225, 238, 255, 243, 249, 227, 204, 184, 152, 131, 109, 91, 81, 76, 84, 86, 102, 121, 128, 156, 164, 167, 189, 175, 169, 169, 131, 121, 91, 53, 33, 19, 0, 1, 14, 15, 57, 85, 104, 165, 179, 210, 251, 233, 255, 247, 217, 216, 180, 149, 133, 96, 84, 69, 63, 65, 74, 91, 102, 133, 147, 166, 190, 183, 200, 196, 170, 177, 136, 114, 94, 48, 25, 15, 0, 0, 12, 17, 44, 90, 109, 154, 201, 214, 248, 255, 255, 251, 243, 209, 186, 164, 121, 104, 83, 55, 64, 55, 59, 85, 90, 120, 144, 161, 177, 193, 192, 189, 179, 157, 133, 106, 71, 31, 27, 12, 0, 19, 23, 28, 97, 99, 138, 199, 196, 233, 255, 235, 249, 230, 203, 190, 156, 134, 106, 91, 76, 62, 67, 68, 74, 95, 106, 131, 149, 161, 178, 180, 182, 173, 161, 142, 116, 96, 64, 51, 50, 19, 41, 49, 47, 94, 
};
/* Touch sensor */
#define TOUCH_SENSOR A0
/* KeyPad define */
const byte ROWS = 4; //four rows
const byte COLS = 4; //three columns
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
  };

byte rowPins[ROWS] = {0, 1, 2, 3}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {4, 5, 6, 7}; //connect to the column pinouts of the keypad

Keypad_I2C keypad = Keypad_I2C( makeKeymap(keys), rowPins, colPins, ROWS, COLS, I2CADDR);

/* Real time clock */
DS1302 rtc(A1, A2, A3); //RST,DAT,CLK Pins of the DS1302 Module 
/* Software Serial for communicate with wifi */
SoftwareSerial Arduino_softSerial(10, 13); // RX: 10 - TX: 13
String data_send = "";
/* Declare for any var about time here. */
unsigned long startMillis;        // Some global variables available anywhere in the program
unsigned long currentMillis;      // Current time since the program started 
//unsigned long startMillisTouch;
unsigned long startMillisReceiveData;
unsigned long startMillisFeedActive;
unsigned long startMillisWaitPetEat;
unsigned long startMillisTest;
/* Declare for any flag here. */
bool flag_settingSchedule;
bool flag_settingMaxFood;
bool flag_sch0_active = false;             // If flag = 1 then feed the animal according to the time0 and vice versa.
bool flag_sch1_active = false;            // If flag = 1 then feed the animal according to the time1 and vice versa.
bool flag_sch2_active = false;            // If flag = 1 then feed the animal according to the time2 and vice versa.
bool FIRST_PRESS_RESET;
bool flag_confirm = false;
bool flag_confirm_with_keypad = false;
bool waitForPet = false;
/* Declare for the button or something else. */
int btn[4] = {7, 8, 12, 9};
int mode = RC_MODE;                      // State to display on LCD (for button0).
int counter;                             // Variable for calculating the total number of digits.
int status = INIT_MODE;                   
int menu = 1;
/* Declare about food */
int remaining_food = 0;
int remainingFoodInContainer;
int index_schedule_keypad = 0;
int index_foodisreleased = 0;
int index_maxfood = 0;
int current_index_action3 = -1;
int index_action1 = 0;
int current_released = 0;
int N0FoodReleasedNow = 0;
/* Char array / struct for store all datas of time/ food */
struct foodReleased {
  char food[3] = {'3', '0', '0'};
  int index;
};

struct indexOfCharKeypad {
  int releasedFood[4];
  int flagReleasedFood[4];
  int flagmaxFood;
  int maxFood;
} ;

bool forceFeed = false;
bool first_feed = false;

indexOfCharKeypad indexKeypad;
foodReleased foodReleasedEachTime_array[4];
char MAX_FOOD_PER_DAY_array[4] = {'1', '0', '0', '0'};
char setSchedule0[6] = {'0', '0', '0', '0', '0', '0'};
char setSchedule1[6] = {'0', '0', '0', '0', '0', '0'};
char setSchedule2[6] = {'0', '0', '0', '0', '0', '0'};
int currentDailyFood = 0;
LiquidCrystal_I2C lcd(LCDADDR,16,2);  // set the LCD address to 0x20 for a 16 chars and 2 line display
/* weight sensor */
HX711 current_food;
HX711 amount_of_remaining_food;
double readingCurrFood;
double lastReadingCurrFood;
double readingRemainFood;
double lastReadingRemainFood;
int CURRFOOD_DOUT_PIN = 2;
int CURRFOOD_SCK_PIN = 3;
int REMAINFOOD_DOUT_PIN = 4;
int REMAINFOOD_SCK_PIN = 5;
int setting_food = 0;
bool feed_active = false;
float CALIBRATION_FACTOR = -100; // weight / 1g
String data;
int pos = 0;
int wifi_index = 0;
/* Servo */
ServoTimer2 myservo;  // create servo object to control a servo
/* EEPROM address*/
int flag_sche0_address = 0;
int flag_sche1_address = 1;
int flag_sche2_address = 2;

uint16_t currentAddress_foodReleased = 5;
uint16_t currentAddress_indexKeypad = 40;

int maxFood_address = 80;
int schedule0_address = 90;
int schedule1_address = 100;
int schedule2_address = 110;
int currentDailyFood_address = 120;
int feedActive_address = 130;



// update menu for lcd
void updateMenu() {
  switch (menu) {
    case 0:
      menu = 1;
      break;
    case 1:
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print(">All Informations");
      lcd.setCursor(0, 1);
      lcd.print("Set Schedule");
      break;
    case 2:
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("All Informations");
      lcd.setCursor(0, 1);
      lcd.print(">Set Schedule");
      break;
    case 3:
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print(">Food is released");
      lcd.setCursor(0, 1);
      lcd.print("Set max food");
      break;
    case 4:
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Food is released");
      lcd.setCursor(0, 1);
      lcd.print(">Set max food");
      break;
    case 5:
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print(">Reset settings");
      break;
    case 6:
      menu = 5;
      break;
    case 7:
      menu = 6;
  }
}
int calDigitofNumber(int number) {
    int count = 0;
    int temp = number;
    do {
      temp /= 10;
      ++count;
    } while (temp != 0);
    return count;
}
// Display the remaining food on the LCD. 
void displayRemainingFood_LCD(int status) {
    lcd.init();                      // Initialize the lcd 
    // Print a message to the LCD.
    lcd.clear();                    // Clear screen
    lcd.backlight();                // Turn on background light
    lcd.setCursor(1,0);
    lcd.print("REMAINING FOOD");

    // Display (g) is still on the plate. 
    int count1 = calDigitofNumber(int(readingCurrFood));
    int count2 = calDigitofNumber(int(readingRemainFood));
    
    switch(status) {
      case RP_MODE:
          lcd.setCursor(1, 1);
          lcd.print("PLATE:");
          lcd.setCursor(8, 1);
          lcd.print(int(readingCurrFood));
          lcd.setCursor(8 + count1 + 1, 1);
          lcd.print("G");
          break;
      case RC_MODE:
          lcd.setCursor(1, 1);
          lcd.print("CONTAINER:");
          lcd.setCursor(11, 1);
          lcd.print(int(readingRemainFood));
          lcd.setCursor(11 + count2, 1);
          lcd.print("G");
          break;
    }
}
// Display feed time on LCD 
void displayTimeSchedule_LCD(char setSchedule[6]) {
    int current_cursor = 0;
    lcd.init();                      // initialize the lcd 
    // Print a message to the LCD.
    lcd.clear();                    // Clear screen
    lcd.backlight();                // Turn on background light
    lcd.setCursor(0,0);
    if (flag_settingSchedule) {
        lcd.setCursor(1,0);
        switch(status) {
            case SCHEDULE0_MODE:
                  lcd.print("SET SCHEDULE0");
                  break;
            case SCHEDULE1_MODE:
                  lcd.print("SET SCHEDULE1");
                  break;
            case SCHEDULE2_MODE:
                  lcd.print("SET SCHEDULE2");
                  break;   
            default:
                
                  break; 
        }  
    } else {
          lcd.print("TIME");
          lcd.setCursor(4, 0);
          switch(mode) {
            case T0_MODE:
                lcd.print(0);
                lcd.setCursor(5, 0);
                if (flag_sch0_active) {
                    lcd.print(" - ACTIVE");
                } else lcd.print(" - INACTIVE");
                break;
            case T1_MODE:
                lcd.print(1);
                if (flag_sch1_active) {
                    lcd.print(" - ACTIVE");
                } else lcd.print(" - INACTIVE");
                break;
            case T2_MODE:
                lcd.print(2);
                if (flag_sch2_active) {
                    lcd.print(" - ACTIVE");
                } else lcd.print(" - INACTIVE");
                break;
            default:
              lcd.print(" - def");
              break;              
          }
    }
    // Display hour
    //for (int i = 0; i < strlen(setSchedule); i++) Serial.println(setSchedule[i]);

    lcd.setCursor(4, 1);     
    lcd.print(setSchedule[0]);
    lcd.setCursor(5, 1);
    lcd.print(setSchedule[1]);  
    lcd.setCursor(6, 1); 
    lcd.print(":");
    // Display minute
    lcd.setCursor(7, 1);       
    lcd.print(setSchedule[2]);
    lcd.setCursor(8, 1);    
    lcd.print(setSchedule[3]);
    lcd.setCursor(9, 1); 
    lcd.print(":");
    // Display second
    lcd.setCursor(10, 1);       
    lcd.print(setSchedule[4]);
    lcd.setCursor(11, 1);    
    lcd.print(setSchedule[5]);
}
// Set max food per day
void displayMaxFood() {
    lcd.init();
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("MAX FOOD PER DAY");
    lcd.setCursor(6,1);
    int current_cursor = 6;
    int temp = 0;
    int indexMaxFood;
    if (indexKeypad.flagmaxFood == 1) {
      indexMaxFood = 4;
    } else indexMaxFood = indexKeypad.maxFood;
    if (indexKeypad.maxFood == 0) {
      lcd.print(0);
      temp = 1;
    } else {  
        for (int i = 0; i < indexMaxFood; i++ ) {
          if (MAX_FOOD_PER_DAY_array[i] > '9' || MAX_FOOD_PER_DAY_array[i] < '0') break;
          lcd.print(MAX_FOOD_PER_DAY_array[i]);
          temp = i;
        }
    }
    lcd.setCursor(current_cursor + temp + 2, 1);
    lcd.print("G");

}

void displayFoodReleased(int index) {
    int current_cursor = 0;
    lcd.init();
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("FOOD IS RELEASED");
    lcd.setCursor(0,1);
    if (index != 3) {
      lcd.print("EACH TIME ");
      lcd.setCursor(10, 1);
      lcd.print(index);
      current_cursor = 10;
      lcd.setCursor(++current_cursor, 1);
      lcd.print(":");
    } else {
      lcd.print("DAILY");
      current_cursor = 4;
      lcd.setCursor(++current_cursor, 1);
      lcd.print(": ");
      current_cursor = 6;
    }

    lcd.setCursor(++current_cursor, 1);
    int temp = 0;
    int indexReleased;
    if (indexKeypad.flagReleasedFood[index] == 1) {
      indexReleased = 3;
    } else indexReleased = indexKeypad.releasedFood[index];
        
    if (indexKeypad.releasedFood[index] == 0) {
      lcd.print(0);
      temp = 1;
    } else {  
        for (int i = 0; i < indexReleased; i++ ) {
          if (foodReleasedEachTime_array[index].food[i] > '9' || foodReleasedEachTime_array[index].food[i] < '0') break;

          lcd.print(foodReleasedEachTime_array[index].food[i]);
          temp = i;
        }
    }
    lcd.setCursor(current_cursor + temp + 1, 1);
    lcd.print("G");
}

void setActiveSchedule(int num, bool flag_sch_active) {
  lcd.clear();
  lcd.setCursor(3, 0);
  lcd.print("SCHEDULE");
  lcd.setCursor(12, 0);
  lcd.print(num);

  if (flag_sch_active) {
    lcd.setCursor(5, 1);
    lcd.print("ACTIVE");
  } else {
    lcd.setCursor(4, 1);
    lcd.print("INACTIVE");
  }
}

void checkValidSchedule(char *sch_arr) {
  if (sch_arr[0] >= '2') sch_arr[0] = '2';

  if (sch_arr[0] == '2' && sch_arr[1] >= '5') sch_arr[1] = '3';

  if (sch_arr[0] == '2' && sch_arr[1] == '4') { sch_arr[0] = '0'; sch_arr[1] = '0'; };

  if (sch_arr[2] >= '6') sch_arr[2] = '5';

  if (sch_arr[4] >= '6') sch_arr[4] = '5';

}
void backFunction() {
  switch(menu) {
    case 1:
      switch(mode) {
          case RC_MODE:
              // displayRemainingFood_LCD(RC_MODE);
              mode = T2_MODE;
              displayTimeSchedule_LCD(setSchedule2); 
              break;
          case RP_MODE: 
              mode = RC_MODE;
              displayRemainingFood_LCD(RC_MODE);
              break;
          case RF_MODE:
              mode = RP_MODE;
              displayRemainingFood_LCD(RP_MODE);
              break;
          case T0_MODE:      
              mode = RF_MODE;
              displayFoodReleased(0);
              break;
          case T1_MODE:  
              mode = T0_MODE;
              displayTimeSchedule_LCD(setSchedule0);
              break;
          case T2_MODE:
              mode = T1_MODE;
              displayTimeSchedule_LCD(setSchedule1);
              break;
          default:
            break;
      }
      break;
    case 2:
      switch(status) {
        case SCHEDULE0_MODE:
              status = SCHEDULE2_ACTIVE;
              setActiveSchedule(2, flag_sch2_active);
              break;
        case SCHEDULE0_ACTIVE:
              status = SCHEDULE0_MODE;
              displayTimeSchedule_LCD(setSchedule0);
              break;
        case SCHEDULE1_MODE:
              status = SCHEDULE0_ACTIVE;
              setActiveSchedule(0, flag_sch0_active);
              break;
        case SCHEDULE1_ACTIVE:
              status = SCHEDULE1_MODE;
              displayTimeSchedule_LCD(setSchedule1);
              break;
        case SCHEDULE2_MODE:
              status = SCHEDULE1_ACTIVE;
              setActiveSchedule(1, flag_sch1_active);
              break;
        case SCHEDULE2_ACTIVE:
              status = SCHEDULE2_MODE;
              displayTimeSchedule_LCD(setSchedule2);
              break;
        default:
            break; 
      } 
      break;
    default:
      Serial.println(menu);
      break;
  }
}
void initFoodReleased() {
  for (int i = 0; i < MAX_TIMES_FOOD_RELEASED; i++)
    foodReleasedEachTime_array[i].index = 0;
}
void initIndexOfCharKeypad() {
  indexKeypad.maxFood = 4;
}

void initLoadCell() {    
    lcd.setCursor(8, 1);
    lcd.print(".");
    current_food.begin(CURRFOOD_DOUT_PIN, CURRFOOD_SCK_PIN);
    current_food.set_scale(111.f);
    current_food.tare(); // reset the scale to 0

    amount_of_remaining_food.begin(REMAINFOOD_DOUT_PIN, REMAINFOOD_SCK_PIN);
    amount_of_remaining_food.set_scale(116.f);
    lcd.setCursor(9, 1);
    lcd.print(".");
    amount_of_remaining_food.tare(); 
}
void restoreDataFromEEPROM() {
    eepromRead(currentAddress_foodReleased, foodReleasedEachTime_array, sizeof(foodReleasedEachTime_array));
    eepromRead(currentAddress_indexKeypad, &indexKeypad, sizeof(indexKeypad));
    eepromReadChar(maxFood_address , MAX_FOOD_PER_DAY_array, 4);
    eepromReadChar(schedule0_address , setSchedule0, 6);
    eepromReadChar(schedule1_address , setSchedule1, 6); 
    eepromReadChar(schedule2_address , setSchedule2, 6);
    currentDailyFood = EEPROM.read(currentDailyFood_address);
    flag_sch0_active = EEPROM.read(flag_sche0_address);
    flag_sch1_active = EEPROM.read(flag_sche1_address);
    flag_sch2_active = EEPROM.read(flag_sche2_address);
}
void updateChar(char *arr, String data, int size) {
    for (int i = 0; i < size; i++) {
      arr[i] = data[i];
    }
}

int charArraytoInt(char *arr, int size) {
  int number = 0;
  for (int i = 0; i < size; i++) {
    number *= 10;
    number += arr[i] - 48;
  }
  return number;
}

String reverseArr(String arr) {
    String res = "xxxxxxxxxx";
    int i = 0, j = 6;
    for (; j <= 9; i++, j++) {
        res[i] = arr[j];
    }
    
    res[i++] = '-'; 
    
    for (j = 0; j < 2; j++, i++) {
        res[i] = arr[j];
    }
    
    for (int j = 2; j <= 4; j++, i++) {
        res[i] = arr[j];   
    }
    
    return res;
}

void checkFeedTime() {
  /* Time feed */
  for (int i = 0; i < MAX_TIMES_SCHEDULE + 1; i++) {
    String time = "";
    String current_time = rtc.getTimeStr();
    //Serial.println(current_time);
    String current_date = rtc.getDateStr(2, FORMAT_MIDDLEENDIAN, '-');
    current_date = reverseArr(current_date);
    int weight = 0;
    for (int j = 0; j < 6; j++) {
      if (j % 2 == 0 && j != 0) time += ':';

      if (i == 0) time += setSchedule0[j];
      else if (i == 1) time += setSchedule1[j];
      else if (i == 2) time += setSchedule2[j];
    }

    if (current_time == time) {
      feed_active = true;
      String regChar = "FS";
      int food = charArraytoInt(foodReleasedEachTime_array[i].food, indexKeypad.releasedFood[i]);
      Arduino_softSerial.println( regChar + food + ' ' + current_date + ' ' + current_time );      
      time = "";
      N0FoodReleasedNow = food;
      delay(1000);
    }
  }
}

void feedActiveStoreIntoFireStore() {
  feed_active = true;
  forceFeed = true;
  Serial.println("Sent");
  String regChar = "FS";
  String current_time = rtc.getTimeStr();
  String current_date = rtc.getDateStr(2, FORMAT_MIDDLEENDIAN, '-');
  current_date = reverseArr(current_date);

  int food = charArraytoInt(foodReleasedEachTime_array[3].food, indexKeypad.releasedFood[3]);
  N0FoodReleasedNow = food;
  Arduino_softSerial.println( regChar + food + ' ' + current_date + ' ' + current_time );
}

bool checkNewDay() {
  String currentTime = rtc.getTimeStr();
  String newDay = "00:00:00";
  if (currentTime == newDay) return true;

  return false;
}
void printConfirm();
void action1();
void action2();
void action3();
void action4();
void action5();
void executeAction();
float time_scale;
void setup()
{ 
  startMillisFeedActive = millis();
  startMillis = millis();   
  //startMillisTouch = millis();       
  startMillisReceiveData = millis();     
  startMillisWaitPetEat = millis();
  startMillisTest = millis();
  Serial.begin(57600);
  Arduino_softSerial.begin(9600);
  restoreDataFromEEPROM();
  /* Setup for real time clock */
  rtc.halt(false);
  rtc.writeProtect(false);
  // rtc.setTime(18, 8, 35);  //Hour, Min, Sec 
  // rtc.setDate(12, 12, 2022); //Day, Month, Year

  lcd.home();
  lcd.init();
  lcd.clear();
  lcd.backlight();
  lcd.begin(16, 2);

  keypad.begin(makeKeymap(keys));

  Wire.begin();

  pinMode(btn[0], INPUT_PULLUP);
  pinMode(btn[1], INPUT_PULLUP);
  pinMode(btn[2], INPUT_PULLUP);
  pinMode(btn[3], INPUT_PULLUP);
  FIRST_PRESS_RESET = 1; 
  // Initial start time.

  lcd.setCursor(1, 0);
  lcd.print("Initializing");
  lcd.setCursor(1, 1);
  lcd.print("machine");
  initLoadCell();
  // Servo
  lcd.setCursor(10, 1);
  lcd.print(".");
  myservo.detach(); 

  initIndexOfCharKeypad();
  initFoodReleased();
  updateMenu();
  feed_active = false;
  forceFeed = false;
  waitForPet = false;
  feed_active = false;
  first_feed = false;
  N0FoodReleasedNow = 0;
  indexKeypad.releasedFood[3] = 2;
  indexKeypad.maxFood= 4;
  time_scale = charArraytoInt(foodReleasedEachTime_array[3].food, indexKeypad.releasedFood[3]);
}
float last_weight_in_plate = 0;
void loop() {
  // weight sensor
  //feed_active = false;
  // myservo.attach(6);
  // myservo.write(pos++);
  if (checkNewDay() == true) currentDailyFood = 0;
  /* If 10s have passed since food is released, the pet has not arrived. Use audio to call pet for 20s */
  // if (waitForPet && (currentMillis - startMillisWaitPetEat >= 10000 && currentMillis - startMillisWaitPetEat <= 20000) 
  //     && (last_weight_in_plate < lastReadingCurrFood - 20 || last_weight_in_plate > lastReadingCurrFood + 20)) {
  //     startPlayback(sample, sizeof(sample));
  //     delay(2500);
  // }
    /* Check feed time is ready */
  checkFeedTime();
  currentMillis = millis();  // Get the current "time" (actually the number of milliseconds since the program started)
  startMillisTest = millis();
  if (current_food.wait_ready_timeout(60)) {
    readingCurrFood = round(current_food.get_units());
    readingRemainFood = round(amount_of_remaining_food.get_units());

    if (readingCurrFood != lastReadingCurrFood) {
      readingCurrFood = round(current_food.get_units());
      // Serial.print("last cur: "); Serial.print(lastReadingCurrFood);
      // Serial.println("\n");
      
    }
    if (readingRemainFood != lastReadingRemainFood) {
      lastReadingRemainFood = round(amount_of_remaining_food.get_units());
      // Serial.print("last remain: "); Serial.print(lastReadingRemainFood);
      // Serial.println("\n");
    }
    if (readingRemainFood < 0) readingRemainFood = 0;
    if (readingCurrFood < 0) readingCurrFood = 0;
    lastReadingRemainFood = readingRemainFood;
    lastReadingCurrFood = readingCurrFood;    
  }

  /* Received touch signal */
  //Serial.println(analogRead(TOUCH_SENSOR));
  if ( analogRead(TOUCH_SENSOR) > 900) {
    Serial.println(analogRead(TOUCH_SENSOR));
    feed_active = true;
    time_scale = charArraytoInt(foodReleasedEachTime_array[3].food, indexKeypad.releasedFood[3]);
    Serial.println("Touch triggered!");
    //startMillisTouch = millis();
  }
  /* Feed for pet only current daily food + food is released daily less than max food per day */
  if ( feed_active  && (!startMillisFeedActive || (currentMillis - startMillisFeedActive >= 1000) || forceFeed) 
                            ) {
                              
        Serial.println("active");
        startMillisTest = currentMillis; 
        time_scale /= 30;
        Serial.println(time_scale);
        while (currentMillis - startMillisTest <= 2500) {
          currentMillis = millis();
          myservo.attach(6);
          myservo.write(pos++);
        } 
        
          //Serial.println("Inactive");
          currentDailyFood += charArraytoInt(foodReleasedEachTime_array[3].food, indexKeypad.releasedFood[3]);
          myservo.detach(); // turn off servo
          
          waitForPet = true; // wait for pet comes to eat.
          feedActiveStoreIntoFireStore(); // push data into firestore
          feed_active = false;
          forceFeed = false;
          first_feed = false;
          N0FoodReleasedNow = 0;
          startMillisFeedActive = millis();
          startMillisWaitPetEat = millis();
          last_weight_in_plate =  round(current_food.get_units());
          float food_temp = round(amount_of_remaining_food.get_units());
          String regChar = "C";
          Arduino_softSerial.println( regChar + food_temp);
        //}
    }
  
  flag_confirm = false;

  /* Received data from ESP8266 */
  while(Arduino_softSerial.available()) {
    data = Arduino_softSerial.readStringUntil('\n');
    data.remove(data.length() - 1, 1);
    Serial.println(data);
  }
  if (data[0] == 'R') {
    
    data.remove(0, 1);
    updateChar(foodReleasedEachTime_array[3].food, data, data.length());
    indexKeypad.releasedFood[3] = data.length();
    data = "";
    eepromWrite(currentAddress_foodReleased, foodReleasedEachTime_array, sizeof(foodReleasedEachTime_array));
    eepromWrite(currentAddress_indexKeypad, &indexKeypad, sizeof(indexKeypad));
    
    Arduino_softSerial.println("data 0");
    feedActiveStoreIntoFireStore();
    delay(60);
  } else if (data[0] == 'X') {
    data.remove(0, 1);
    
    /* Inactive or active schedule */
    if (data[data.length() - 1] == '1') flag_sch0_active = true;
    else flag_sch0_active = false;
    EEPROM.write(flag_sche0_address, flag_sch0_active);
    /* Get food is released each time */
    data.remove(data.length() - 1, 1);
    String released_weight = data;
    released_weight.remove(0, 6);
    updateChar(foodReleasedEachTime_array[0].food, released_weight, released_weight.length());
    indexKeypad.releasedFood[0] = released_weight.length();
    if (released_weight.length() == 3) indexKeypad.flagReleasedFood[0] = 1;
    /* Update schedule time */
    
    data.remove(6, data.length() - 2);
    
    updateChar(setSchedule0, data, 6);
    eepromWriteChar(schedule0_address, setSchedule0, 6);
    eepromWrite(currentAddress_indexKeypad, &indexKeypad, sizeof(indexKeypad));
    data = "";
    Arduino_softSerial.println("data 1");
    delay(60);
  } else if (data[0] == 'Y') {
    data.remove(0, 1);
    /* Inactive or active schedule */
    if (data[data.length() - 1] == '1') flag_sch1_active = true;
    else flag_sch1_active = false;
    EEPROM.write(flag_sche1_address, flag_sch1_active);
    /* Get food is released each time */
    data.remove(data.length() - 1, 1);
    String released_weight = data;
    released_weight.remove(0, 6);
    updateChar(foodReleasedEachTime_array[1].food, released_weight, released_weight.length());
    indexKeypad.releasedFood[1] = released_weight.length();
    if (released_weight.length() == 3) indexKeypad.flagReleasedFood[1] = 1;
    /* Update schedule time */
    
    data.remove(6, data.length() - 2);
    
    updateChar(setSchedule1, data, 6);
    eepromWriteChar(schedule1_address, setSchedule1, 6);   
    eepromWrite(currentAddress_indexKeypad, &indexKeypad, sizeof(indexKeypad));   
    data = "";
    Arduino_softSerial.println("data 2");
    delay(60);
  } else if (data[0] == 'Z') {
    data.remove(0, 1);
    /* Inactive or active schedule */
    if (data[data.length() - 1] == '1') flag_sch2_active = true;
    else flag_sch2_active = false;
    EEPROM.write(flag_sche2_address, flag_sch2_active);
    /* Get food is released each time */
    data.remove(data.length() - 1, 1);
    String released_weight = data;
    released_weight.remove(0, 6);
    updateChar(foodReleasedEachTime_array[2].food, released_weight, released_weight.length());
    indexKeypad.releasedFood[2] = released_weight.length();
    if (released_weight.length() == 3) indexKeypad.flagReleasedFood[2] = 1;

    /* Update schedule time */
    
    data.remove(6, data.length() - 2);
    
    updateChar(setSchedule2, data, 6);
    eepromWriteChar(schedule2_address, setSchedule2, 6);   
    eepromWrite(currentAddress_indexKeypad, &indexKeypad, sizeof(indexKeypad));   
    data = "";
    Arduino_softSerial.println("data 3");
    delay(60);
  } else if (data[0] == 'M') {
    /* Remove recognise character */
    data.remove(0, 1);
    /* Update char and write data into EEPROM */
    updateChar(MAX_FOOD_PER_DAY_array, data, data.length());
    indexKeypad.maxFood = data.length();
    eepromWriteChar(maxFood_address, MAX_FOOD_PER_DAY_array, data.length());
    eepromWrite(currentAddress_indexKeypad, &indexKeypad, sizeof(indexKeypad));
    data = "";
    /* Send msg to esp8266 that arduino had received */
    Arduino_softSerial.println("data 4");
    delay(60);
  }

  /* Turn off LCD after 30s if nothing changes */
  if (currentMillis - startMillis >= TIME_NOTHING_CHANGES) {
      lcd.noBacklight();
      lcd.noDisplay();   
  } else {
    lcd.backlight();
    lcd.display();
  }
  /* If any button is pressed, then start calculate time for turn off LCD again. */
  if ((!digitalRead(btn[0]) || !digitalRead(btn[1]) || !digitalRead(btn[2]) || !digitalRead(btn[3]) 
                            || flag_confirm || flag_confirm_with_keypad) ) startMillis = millis();
  /* Down button */
  if (!digitalRead(btn[2])){
    flag_confirm = false;
    flag_confirm_with_keypad = false;
    if (menu >= 5) menu = 1;
    else menu++;
    updateMenu();

    while (!digitalRead(btn[2])) delay(50);
  }
  /* Up button */
  if (!digitalRead(btn[3])){
    flag_confirm = false;
    flag_confirm_with_keypad = false;
    if (menu <= 1) menu = 5;
    else menu--;
    updateMenu();
    
    while(!digitalRead(btn[3])) delay(50);;
  }
  /* Back button */
  if (!digitalRead(btn[1])) {
      flag_confirm = false;
      backFunction();
      while(!digitalRead(btn[1])) delay(50);;
  }
  /* Confirm button */
  if (!digitalRead(btn[0])){
      flag_confirm = true;
      index_schedule_keypad = 0;
      flag_settingSchedule = false;
      if (menu == 2) {
        flag_settingSchedule = true;
        flag_confirm_with_keypad = true;
        switch(status) {
          case INIT_MODE:
            status = SCHEDULE0_MODE;
            displayTimeSchedule_LCD(setSchedule0);
            break;
          case SCHEDULE0_MODE:
                status = SCHEDULE0_ACTIVE;
                setActiveSchedule(0, flag_sch0_active);
                break;
          case SCHEDULE0_ACTIVE:
                status = SCHEDULE1_MODE;
                displayTimeSchedule_LCD(setSchedule1);
                break;
          case SCHEDULE1_MODE:
                status = SCHEDULE1_ACTIVE;
                setActiveSchedule(1, flag_sch1_active);
                break;
          case SCHEDULE1_ACTIVE:
                status = SCHEDULE2_MODE;
                displayTimeSchedule_LCD(setSchedule2);
                break;
          case SCHEDULE2_MODE:
                status = SCHEDULE2_ACTIVE;
                setActiveSchedule(2, flag_sch2_active);
                break;
          case SCHEDULE2_ACTIVE:
                status = SCHEDULE0_MODE;
                displayTimeSchedule_LCD(setSchedule0);
                break;
          default:
              break; 
        } 
      } else if (menu == 3) {
        flag_settingSchedule = false;
        flag_confirm_with_keypad = true;
        if (current_index_action3 >= 3) current_index_action3 = -1;
        displayFoodReleased(++current_index_action3);
        
      } else if (menu == 4) {
          flag_settingSchedule = false;
          flag_confirm_with_keypad = true;
          displayMaxFood();
      } else if (menu == 5) {
          flag_settingSchedule = false;
          flag_confirm_with_keypad = false;
          printConfirm();       
      }
        
      while (!digitalRead(btn[0])) delay(50);
  }

  if (flag_confirm) {
    executeAction(); // Confirm action.
  }

  if (flag_confirm_with_keypad) {
    executeAction(); // Confirm action.
  }
}


void printConfirm() {
  lcd.init();
  lcd.clear();
  lcd.setCursor(2, 0);
  lcd.print("PRESS AGAIN");
  lcd.setCursor(2, 1);
  lcd.print("TO CONFIRM");
  //FIRST_PRESS_RESET = 0;
}
// Func to set all elements of an array is equal to 0
void setZero(char *arr) {
    for (size_t i = 0 ; i < strlen (arr); i++) 
      arr[i] = '0';

    Serial.println("DONE");
}

void clearSettings() {
    if (FIRST_PRESS_RESET) {
        FIRST_PRESS_RESET = 0;
    } 
    else {
        //setZero(setSchedule0); setZero(setSchedule1); setZero(setSchedule2);
        //setZero(MAX_FOOD_PER_DAY_array); 
        for (int i = 0; i < MAX_TIMES_FOOD_RELEASED; i++) {
          indexKeypad.releasedFood[i] = 0;
          indexKeypad.maxFood = 0;
          //setZero(foodReleasedEachTime_array[i].food);
        }
        flag_sch0_active = 0, flag_sch1_active = 0, flag_sch2_active = 0;
        mode = RC_MODE;
        lcd.clear();
        lcd.setCursor(4, 0);
        FIRST_PRESS_RESET = 1;
        //eepromWrite(currentAddress_foodReleased, foodReleasedEachTime_array, sizeof(foodReleasedEachTime_array));
        eepromWrite(currentAddress_indexKeypad, &indexKeypad, sizeof(indexKeypad));
        eepromWriteChar(schedule0_address, setSchedule0, 6);
        eepromWriteChar(schedule1_address, setSchedule1, 6);
        eepromWriteChar(schedule2_address, setSchedule2, 6);
        //eepromWriteChar(maxFood_address, MAX_FOOD_PER_DAY_array, 4);
        EEPROM.write(flag_sche0_address, flag_sche0_address);
        EEPROM.write(flag_sche1_address, flag_sche1_address);
        EEPROM.write(flag_sche2_address, flag_sche2_address);
        lcd.print("DONE !!");
    } 
}

void executeAction() {
  switch (menu) {
    case 1:
      action1();
      break;
    case 2:
      action2();
      break;
    case 3:
      action3();
      break;
    case 4:
      action4();
      break;
    case 5:
      action5();
      break;
    default:
      break;
  }
}

void action1() {
    switch(mode) {
        case RC_MODE: 
            displayRemainingFood_LCD(RC_MODE);
            mode = RP_MODE;
            break;
        case RP_MODE: 
            displayRemainingFood_LCD(RP_MODE);
            mode = RF_MODE;
            break;
        case RF_MODE:
            //Serial.println(index_action1);
            displayFoodReleased(index_action1);
            if (index_action1 >= 3) {
              index_action1 = 0;
              mode = T0_MODE;
            }
            else index_action1++;
            break;
        case T0_MODE:
            displayTimeSchedule_LCD(setSchedule0);
            mode = T1_MODE;
            break;
        case T1_MODE:
            displayTimeSchedule_LCD(setSchedule1);
            mode = T2_MODE;
            break;
        case T2_MODE:
            displayTimeSchedule_LCD(setSchedule2);
            mode = RC_MODE;
            break;
        default:
            Serial.println(mode);
    }
}
void action2() {
  flag_settingSchedule = 1;
  char key = keypad.getKey();// Read the key
  //Serial.print(key);
  if (key) {
      if (key == 'B') {
        switch(status) {
            case SCHEDULE0_ACTIVE:
              flag_sch0_active = !flag_sch0_active;
              EEPROM.write(flag_sche0_address, flag_sch0_active);
              break;
            case SCHEDULE1_ACTIVE:
              flag_sch1_active = !flag_sch1_active;
              EEPROM.write(flag_sche1_address, flag_sch1_active);
              break;
            case SCHEDULE2_ACTIVE:
              flag_sch2_active = !flag_sch2_active;
              EEPROM.write(flag_sche2_address, flag_sch2_active);
              break;
            default:
              break;
        }
      }
      else if (key == 'D') {
        index_schedule_keypad = 0; 
        switch(status) {
          case SCHEDULE0_MODE:
                status = SCHEDULE0_ACTIVE;
                setActiveSchedule(0, flag_sch0_active);
                break;
          case SCHEDULE0_ACTIVE:
                status = SCHEDULE1_MODE;
                displayTimeSchedule_LCD(setSchedule1);
                break;
          case SCHEDULE1_MODE:
                status = SCHEDULE1_ACTIVE;
                setActiveSchedule(1, flag_sch1_active);
                break;
          case SCHEDULE1_ACTIVE:
                status = SCHEDULE2_MODE;
                displayTimeSchedule_LCD(setSchedule2);
                break;
          case SCHEDULE2_MODE:
                status = SCHEDULE2_ACTIVE;
                setActiveSchedule(2, flag_sch2_active);
                break;
          case SCHEDULE2_ACTIVE:
                status = SCHEDULE0_MODE;
                displayTimeSchedule_LCD(setSchedule0);
                break;
          default:
              break; 
        } 
        return;
      } else if (key == 'C') {
        index_schedule_keypad = 0; 
        switch(status) {
          case SCHEDULE0_MODE:
                for (size_t i = 0 ; i < 6; i++) setSchedule0[i] = '0';
                displayTimeSchedule_LCD(setSchedule0);
                break;
          case SCHEDULE1_MODE:
                for (size_t i = 0 ; i < 6; i++) setSchedule1[i] = '0';
                displayTimeSchedule_LCD(setSchedule1);
                break;
          case SCHEDULE2_MODE:
                for (size_t i = 0 ; i < 6; i++) setSchedule2[i] = '0';
                displayTimeSchedule_LCD(setSchedule2);
                break;
          default:
              break; 
        } 
        return;
      } else if (key == 'A') {
        switch(status) {
          case SCHEDULE0_MODE:
                index_schedule_keypad--;
                setSchedule0[index_schedule_keypad] = '0';

                displayTimeSchedule_LCD(setSchedule0);
                break;
          case SCHEDULE1_MODE:
                index_schedule_keypad--;
                setSchedule1[index_schedule_keypad] = '0';
                
                displayTimeSchedule_LCD(setSchedule1);
                break;
          case SCHEDULE2_MODE:
                index_schedule_keypad--;
                setSchedule2[index_schedule_keypad] = '0';

                displayTimeSchedule_LCD(setSchedule2);
                break;
          default:
              break; 
        }
      }

      if (status == SCHEDULE0_MODE || status == SCHEDULE1_MODE || status == SCHEDULE2_MODE)
          if (key > '9' || key < '0') return;

      if (index_schedule_keypad >= 6) index_schedule_keypad = 0;
      switch(status) {
          case SCHEDULE0_MODE:
                setSchedule0[index_schedule_keypad] = key;
                checkValidSchedule(setSchedule0);
                index_schedule_keypad++;
                displayTimeSchedule_LCD(setSchedule0);
                eepromWriteChar(schedule0_address, setSchedule0, 6);
                break;
          case SCHEDULE1_MODE:
                setSchedule1[index_schedule_keypad] = key;
                checkValidSchedule(setSchedule1);
                index_schedule_keypad++;
                displayTimeSchedule_LCD(setSchedule1);
                eepromWriteChar(schedule1_address, setSchedule1, 6);
                break;
          case SCHEDULE2_MODE:
                setSchedule2[index_schedule_keypad] = key;
                checkValidSchedule(setSchedule2);
                index_schedule_keypad++;
                displayTimeSchedule_LCD(setSchedule2);
                eepromWriteChar(schedule2_address, setSchedule2, 6);
                break;  
          case SCHEDULE0_ACTIVE:
              setActiveSchedule(0, flag_sch0_active);
              EEPROM.write(flag_sche0_address, flag_sch0_active);
              break;
            case SCHEDULE1_ACTIVE:
              setActiveSchedule(1, flag_sch1_active);
              EEPROM.write(flag_sche1_address, flag_sch1_active);
              break;
            case SCHEDULE2_ACTIVE:
              setActiveSchedule(2, flag_sch2_active);
              EEPROM.write(flag_sche2_address, flag_sch2_active);
              break; 
          default:
                
                break; 
      }  
    }
}
void action3() {  
  char key = keypad.getKey();// Read the key
  //Serial.println(indexKeypad.releasedFood[current_index_action3]);
  if (key){
    if (key == 'D') { 
      if (current_index_action3 >= 3) current_index_action3 = 0;
      else current_index_action3++;
    }
    else if (key == 'C') {
      indexKeypad.releasedFood[current_index_action3] = 0;
      setZero(foodReleasedEachTime_array[current_index_action3].food);
    }
    else if (key == 'A') {
      if (indexKeypad.releasedFood[current_index_action3] > 0)
        indexKeypad.releasedFood[current_index_action3]--;
    }
    else {
      if (indexKeypad.releasedFood[current_index_action3] >= 3) return;
      foodReleasedEachTime_array[current_index_action3].food[indexKeypad.releasedFood[current_index_action3]++] = key;
    }
    if (indexKeypad.releasedFood[current_index_action3] > 3)  indexKeypad.flagReleasedFood[current_index_action3] = 1;
    else indexKeypad.flagReleasedFood[current_index_action3] = 0;

    eepromWrite(currentAddress_foodReleased, foodReleasedEachTime_array, sizeof(foodReleasedEachTime_array));
    eepromWrite(currentAddress_indexKeypad, &indexKeypad, sizeof(indexKeypad));
    displayFoodReleased(current_index_action3);
  }
}
void action4() {
  char key = keypad.getKey();// Read the key
  //Serial.println(indexKeypad.releasedFood[current_index_action3]);
  if (key){
    if (key == 'D') { 
      return;
    }
    else if (key == 'C') {
      indexKeypad.maxFood = 0;
      //setZero(foodReleasedEachTime_array[current_index_action3].food);
    }
    else if (key == 'A') {
      if (indexKeypad.maxFood > 0) indexKeypad.maxFood--;
    }
    else {
      if (indexKeypad.maxFood >= 4) return;
      MAX_FOOD_PER_DAY_array[indexKeypad.maxFood++] = key;
    }
    if (indexKeypad.maxFood > 4) indexKeypad.flagmaxFood = 1;
    else indexKeypad.flagmaxFood = 0;

    eepromWriteChar(maxFood_address, MAX_FOOD_PER_DAY_array, 4);
    eepromWrite(currentAddress_indexKeypad, &indexKeypad, sizeof(indexKeypad));
    displayMaxFood();
  }
}
void action5() {
    clearSettings();
}

void displayRealTimeClock()
{
  // whileDisplayRealTimeClock = true;
  lcd.clear();
  lcd.setCursor(0,1);
  lcd.print("Time:");
  lcd.setCursor(5, 1);
  lcd.print(rtc.getTimeStr());
  lcd.setCursor(0, 0);
  lcd.print("Date:");
  lcd.setCursor(5,0);
  lcd.print(rtc.getDateStr(FORMAT_SHORT, FORMAT_LITTLEENDIAN, '/'));

  delay (100); 
}